[{"content":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003ePopular social media platform Twitter contains a wealth of information. Not only does the text from individual tweets help in mining social information, the images and videos contained in the tweets and retweets also give an idea of the content the account handle usually browses or shares on the internet.\u003c/p\u003e\n\u003cp\u003eI had a friend ask me to give him a script that would download all tweets, images, and videos for any account. He was particularly interested in getting the images and videos that the account handle had tweeted on their timeline. With Python being my favorite language, I decided to write a small utility script that would download media files from Twitter timelines.\u003c/p\u003e\n\u003cp\u003eAs is the case with Python, there is a library for life, the universe, and everything. I am kidding about the universe and everything. Anyway, in today’s piece, I am going to show you how easily you can come up with something that scrapes Twitter timelines in about 100 lines of code. We are going to be using the wonderful Python library called  \u003ca href=\"https://www.tweepy.org/\"\u003eTweepy\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFirst things first, fire up a terminal and install the following if you haven’t already:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epip install tweepy\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"fetching-tweets-from-user-timelines\"\u003eFetching Tweets From User Timelines\u003c/h1\u003e\n\u003cp\u003eThe API reference and documentation for Twitter can be found at  \u003ca href=\"https://developer.twitter.com/en/docs/api-reference-index\"\u003ehttps://developer.twitter.com/en/docs/api-reference-index\u003c/a\u003e. We are specifically interested in the user-timeline endpoint.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eGET statuses/user_timeline\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs mentioned in the docs, this returns a collection of the most recent tweets posted by the user  indicated by the  \u003ccode\u003escreen_name\u003c/code\u003e  or  \u003ccode\u003euser_id\u003c/code\u003e  parameters.\u003c/p\u003e\n\u003cp\u003eUser timelines belonging to protected users may only be requested when the authenticated user either “owns” the timeline or is an approved follower of the owner.\u003c/p\u003e\n\u003cp\u003eThe timeline returned is the equivalent of the one seen as a user’s profile on Twitter.\u003c/p\u003e\n\u003cp\u003eThis method can only return up to 3,200 of a user’s most recent tweets. Native retweets of other statuses by the user are included in this total, regardless of whether  \u003ccode\u003einclude_rts\u003c/code\u003e  is set to false when requesting this resource.\u003c/p\u003e\n\u003cp\u003eIn order to make authenticated requests against this API endpoint, one needs to create a new Twitter app by going to  \u003ca href=\"https://dev.twitter.com/apps/new\"\u003ehttps://dev.twitter.com/apps/new\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOnce created, you can go to the API Keys tab, and there you will find the consumer key and consumer secret entries. Make sure to copy them. Create a file called .twitter.json  and place it in your home directory.\u003c/p\u003e\n\u003cp\u003eWe first need to make sure that our script can use these keys and create an authenticated client. This can be done as follows:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efrom tweepy import OAuthHandlerauth = OAuthHandler(consumer_key, consumer_secret)  \napi = tweepy.API(auth)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe API object is what will be used to access user timelines.\u003c/p\u003e\n\u003ch1 id=\"pagination\"\u003ePagination\u003c/h1\u003e\n\u003cp\u003eThe good folks at Twitter incorporated pagination in their APIs. If you don’t know what pagination is, it is basically how APIs respond with chunks of data instead of sending the whole response in one go. This prevents abysmally large amounts of data from being sent over the network.\u003c/p\u003e\n\u003cp\u003eIn order to perform pagination, we must supply a page/cursor parameter with each of our requests. The problem here is this requires a lot of boilerplate code just to manage the pagination loop. To help make pagination easier and require less code, Tweepy has the  \u003ccode\u003eCursor\u003c/code\u003e  object. You use it like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor status tweepy.Cursor(api.user_timeline).items(num_items):  \n    # process status here  \n    process_status(status)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf  \u003ccode\u003enum_items\u003c/code\u003e  is not passed, by default Twitter will return a cursor over 3,200 tweets.\u003c/p\u003e\n\u003cp\u003eSweet! Now let’s use the  \u003ccode\u003eCursor\u003c/code\u003e  object in our code.\u003c/p\u003e\n\u003ch1 id=\"getting-images-and-videos\"\u003eGetting Images and Videos\u003c/h1\u003e\n\u003cp\u003eWe are interested in parsing each tweet, checking if it has any images and videos, and then downloading these artifacts. The media object associated with a tweet is present within a nested attribute called  \u003ccode\u003eextended_entities\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn order to access either the image or video URL, we first check if the  \u003ccode\u003eextended_entities\u003c/code\u003e  attribute is present in the tweet. If yes, then we iterate over the entries corresponding to the attribute  \u003ccode\u003emedia\u003c/code\u003e  within the  \u003ccode\u003eextended_entities\u003c/code\u003e  object. We check if the type of each media object is either a  \u003ccode\u003emedia_url\u003c/code\u003e  or a  \u003ccode\u003evideo\u003c/code\u003e  or  \u003ccode\u003eanimated_gif\u003c/code\u003e, which signals that it is either an image or a video, respectively. We store each URL in separate lists.\u003c/p\u003e\n\u003cp\u003eThe method  \u003ccode\u003eprocess_tweet\u003c/code\u003e  is where we define our logic to extract the image and video URLs.\u003c/p\u003e\n\u003cp\u003eNow that you have two lists, one for videos and one for images, you can easily use something like the Python  \u003ca href=\"https://pypi.org/project/wget/\"\u003ewget library\u003c/a\u003e  to download these to disk.\u003c/p\u003e\n\u003cp\u003eIt is tempting to use multithreading to parallelize the task of downloading the media URLs, as this is mostly disk I/O with little CPU overhead.\u003c/p\u003e\n\u003cp\u003eThe complete code can be found  \u003ca href=\"https://github.com/sauravbiswasiupr/twitter-media-downloader\"\u003eon GitHub\u003c/a\u003e.\u003c/p\u003e\n","description":null,"image":"/images/projects/twitter.jpg","permalink":"https://sauravbiswas.github.io/blogs/twitter_parsing/","title":"Twitter Parsing"},{"content":"\u003cp\u003e\u003cimg src=\"https://miro.medium.com/max/1280/1*Oxbm6OYEzllkmUz3H8SUAQ.jpeg\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eYou just started at your dream job as a software engineer. You feel like you are at the top of this world. You feel motivated and want to make a difference. It’s been a week and it’s now time for you to start shipping code. You choose a sprint task that you think you can accomplish.  \u003cstrong\u003eYou want to impress your colleagues.\u003c/strong\u003e\u003cbr\u003e\nYou created your first feature request. And then, you receive 100 negative comments on it. Some reviews sound like, “\u003cem\u003eOh do you even know how a HashMap works?\u003c/em\u003e”. You feel sad, devastated and depressed.\u003c/p\u003e\n\u003cp\u003eWe have all been there. Life is funny sometimes. On the one hand, programming is so much fun. You can be creative. You are like Leonardo DaVinci painting out his next Monalisa. But then reality hits you hard.\u003c/p\u003e\n\u003cp\u003eStop and think. What did you do wrong?\u003c/p\u003e\n\u003ch2 id=\"1-you-didnt-put-in-a-lot-of-thought\"\u003e\u003cstrong\u003e1. You didn’t put in a lot of thought.\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://miro.medium.com/max/1400/0*yJjYDu475BvIdqgq\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003ePhoto by  \u003ca href=\"https://unsplash.com/@thoughtcatalog?utm_source=medium\u0026amp;utm_medium=referral\"\u003eThought Catalog\u003c/a\u003e  on  \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWe programmers love to churn out stuff fast. But speed should not come at the expense of quality. Before you hit the submit review button, take a long hard look at the changes you made. Did you cover all test cases? Did you handle exceptions correctly? Are you leaving potential memory leaks? All of this matters when you are writing code for a business.\u003c/p\u003e\n\u003ch2 id=\"2-you-didnt-write-enough-tests\"\u003e\u003cstrong\u003e2. You didn’t write enough tests.\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://miro.medium.com/max/1400/0*iMvaw2qYA9Og06fj\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003ePhoto by  \u003ca href=\"https://unsplash.com/@dtravisphd?utm_source=medium\u0026amp;utm_medium=referral\"\u003eDavid Travis\u003c/a\u003e  on  \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTests can actually improve code readability and help you find deep lurking bugs, in some cases, non-obvious ones. Make sure you write enough of them and get into the practice of doing so.\u003c/p\u003e\n\u003ch2 id=\"3-you-didnt-understand-the-problem-statement-completely\"\u003e\u003cstrong\u003e3. You didn’t understand the problem statement completely.\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://miro.medium.com/max/1400/0*-cW-sJvrbppbbbP3\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003ePhoto by  \u003ca href=\"https://unsplash.com/@mimithian?utm_source=medium\u0026amp;utm_medium=referral\"\u003eMimi Thian\u003c/a\u003e  on  \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eStop and think. Do you understand the business that you are writing software for? If not, you should consider reading and re-reading the content of the task that you were assigned. Make sure you can outline the requirements via a flow diagram.  \u003cstrong\u003eTangible\u003c/strong\u003e tasks are easier to complete.\u003c/p\u003e\n\u003ch2 id=\"4-all-comments-are-not-legitimate\"\u003e\u003cstrong\u003e4. All Comments are Not Legitimate\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eEvery team has developers who might not like each other. Does your team have one such person who singles you out on your code changes? If you feel so, you are not the only one. I have faced it in one of my previous workplaces. In such scenarios, talk with your manager. A good manager should always identify such workplace issues and sort them out.\u003c/p\u003e\n\u003cp\u003eDon’t be afraid to speak up against such comments. Code reviews are meant to empower developers to learn from each other and improve. By no means should they make someone feel depressed.\u003c/p\u003e\n\u003ch2 id=\"5-be-confident-in-what-you-deliver-and-deliver-it-with-quality\"\u003e\u003cstrong\u003e5. Be confident in what you deliver, and deliver it with quality.\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://miro.medium.com/max/1400/0*5xhYROhLzkayqLj3\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003ePhoto by  \u003ca href=\"https://unsplash.com/@srz?utm_source=medium\u0026amp;utm_medium=referral\"\u003esydney Rae\u003c/a\u003e  on  \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eRemember that no code review is perfect. There will always be comments. The general idea is to get useful feedback from your peers before you merge it into the main codebase. By no means should it affect your morale and self-esteem.\u003c/p\u003e\n","description":"","image":"/images/projects/converter.jpg","permalink":"https://sauravbiswas.github.io/blogs/code_reviews/","title":"Code Reviews Don't Suck"},{"content":"\u003cblockquote\u003e\n\u003cp\u003eRefactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code, yet improves its internal structure.\u003c/p\u003e\n\u003cp\u003eIt is a disciplined way to clean up code that minimizes the chances of introducing bugs. In essence, when you refactor, you are improving the design of the code after it has been written.” —  \u003cem\u003eMartin Fowler\u003c/em\u003e  \u003cem\u003e(Father of\u003c/em\u003e \u003ca href=\"https://martinfowler.com/bliki/CodeSmell.html\"\u003e\u003cem\u003ecode smell\u003c/em\u003e\u003c/a\u003e\u003cem\u003e)\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet’s face it. We are all programmers. We are smart and intelligent and like to deliver results. But how many times do we care about cleaning up code smell?\u003c/p\u003e\n\u003ch1 id=\"perfect-code-please\"\u003ePerfect Code Please?\u003c/h1\u003e\n\u003cp\u003eWe desire to write code that is free of all bugs. One that tests all possible edge cases. One that passes linter checks each time you run a build. Code that you start to fall in love with. Surely top-notch programmers must be writing such code all the time, right?\u003c/p\u003e\n\u003cp\u003eWrong.\u003c/p\u003e\n\u003cp\u003eNo code is perfect.  \u003cem\u003eEver\u003c/em\u003e!\u003c/p\u003e\n\u003cp\u003ePerfect code doesn’t exist, just like sacred interfaces don’t.\u003c/p\u003e\n\u003cp\u003eCode is something that  \u003cem\u003eevolves\u003c/em\u003e  over time. In most cases, a codebase turns into a behemoth.\u003c/p\u003e\n\u003cp\u003eComplicated codebases are extremely difficult to manage.\u003c/p\u003e\n\u003cp\u003eHence, it becomes all the more important to write clean code. And refactor stuff in bits and pieces. Take an apartment for example. It is more useful to clean it in short stints rather than one long session.\u003c/p\u003e\n\u003cp\u003eWhenever you tinker with a specific part of a codebase, ensure you follow up on the aspects below.\u003c/p\u003e\n\u003ch2 id=\"1-check-in-cleaner-code\"\u003e\u003cstrong\u003e1. Check-in cleaner code\u003c/strong\u003e\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“Leave the campground cleaner than you found it.”—  \u003ca href=\"https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\"\u003eClean Code\u003c/a\u003e  (by Robert Martin)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe boy scout rule states that you must leave the campground cleaner than you found it. Since code degrades and rots  over time, it is good practice to check in code cleaner than what you checked out from version control.\u003c/p\u003e\n\u003cp\u003eWhen making a code change, identify areas of improvement in the surrounding code.\u003c/p\u003e\n\u003ch2 id=\"2-meaningful-names\"\u003e\u003cstrong\u003e2. Meaningful names\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eMeaningful names in your code ensure that you don’t have to add comments. The clearer the name, the easier it is for someone to read it and infer what it is doing.\u003c/p\u003e\n\u003cp\u003eWhen you use a clearer and more meaningful naming convention, you are essentially  \u003cem\u003esaving\u003c/em\u003e  time to write developer documentation.\u003c/p\u003e\n\u003ch2 id=\"3-responsibilities\"\u003e\u003cstrong\u003e3. Responsibilities\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eLet’s face it. The longer a method body, the harder it is to follow. Look for lines that end up working towards a common goal. If you find such chunks,  \u003cem\u003eextract\u003c/em\u003e them out into separate methods with proper names.\u003c/p\u003e\n\u003cp\u003eThe next person who works on that part of the code will thank you profusely. Trust me!\u003c/p\u003e\n\u003cp\u003eA method should be touching upon a single requirement at a time. Following this design paradigm goes a long way in reducing code complexity.\u003c/p\u003e\n\u003ch2 id=\"4-design-patterns\"\u003e\u003cstrong\u003e4. Design patterns\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eDesign patterns enable you to implement tried and tested solutions to problems, thus saving time and effort during the implementation stage of the software development lifecycle.\u003c/p\u003e\n\u003cp\u003eBy using well-understood and documented solutions, the final product will have a much higher degree of comprehension. If the solution is easier to comprehend, then by extension, it will also be easier to maintain.\u003c/p\u003e\n\u003ch2 id=\"5-add-tests\"\u003e\u003cstrong\u003e5. Add tests\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eI can’t but stress the importance of testing your code. Ensure that you have enough unit and integration tests. These not only help you identify potential pitfalls and edge cases but also provide an opportunity to refactor stuff.\u003c/p\u003e\n\u003cp\u003eI can probably keep ranting about the importance of test coverage, and perhaps that warrants its own post one day.\u003c/p\u003e\n\u003cp\u003eEven Google recommends writing unit tests!\u003c/p\u003e\n\u003ch1 id=\"know-when-to-draw-the-line\"\u003eKnow When to Draw the Line\u003c/h1\u003e\n\u003cp\u003eI would conclude by saying that although refactoring is important, it should not come at the expense of completing your task at hand.\u003c/p\u003e\n\u003cp\u003eBe intelligent in choosing what and how much to refactor and very soon, you will be reaping the rewards of your diligence.\u003c/p\u003e\n\u003cp\u003eThanks for reading!\u003c/p\u003e\n","description":null,"image":"/images/projects/refactoring.png","permalink":"https://sauravbiswas.github.io/blogs/refactoring/","title":"Refactoring Code"}]